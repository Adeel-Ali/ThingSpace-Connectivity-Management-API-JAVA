/*
 * ThingSpaceConnectivityManagementAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class GroupsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static GroupsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the GroupsController class 
     */
    public static GroupsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new GroupsController();
            }
        }
        return instance;
    }

    /**
     * Deletes a device group. Devices in the group are moved to the default device group and are not deleted from the account.
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @return    Returns the RestSuccessResponse response from the API call 
     */
    public RestSuccessResponse deleteDeviceGroupUsingDELETE(
                final String vZM2MToken,
                final String aname,
                final String gname
    ) throws Throwable {
        APICallBackCatcher<RestSuccessResponse> callback = new APICallBackCatcher<RestSuccessResponse>();
        deleteDeviceGroupUsingDELETEAsync(vZM2MToken, aname, gname, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Deletes a device group. Devices in the group are moved to the default device group and are not deleted from the account.
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @return    Returns the void response from the API call 
     */
    public void deleteDeviceGroupUsingDELETEAsync(
                final String vZM2MToken,
                final String aname,
                final String gname,
                final APICallBack<RestSuccessResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/{aname}/name/{gname}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4650828554960499138L;
            {
                    put( "aname", aname );
                    put( "gname", gname );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5367102480197083825L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RestSuccessResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RestSuccessResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Make changes to a device group, including changing the name and description, and adding or removing devices.
     * @param    request    Required parameter: Request
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RestSuccessResponse response from the API call 
     */
    public RestSuccessResponse updateDeviceGroupUsingPUT(
                final GroupUpdateRequest request,
                final String aname,
                final String gname,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RestSuccessResponse> callback = new APICallBackCatcher<RestSuccessResponse>();
        updateDeviceGroupUsingPUTAsync(request, aname, gname, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Make changes to a device group, including changing the name and description, and adding or removing devices.
     * @param    request    Required parameter: Request
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void updateDeviceGroupUsingPUTAsync(
                final GroupUpdateRequest request,
                final String aname,
                final String gname,
                final String vZM2MToken,
                final APICallBack<RestSuccessResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/{aname}/name/{gname}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4659754938637458091L;
            {
                    put( "aname", aname );
                    put( "gname", gname );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5419820059443949075L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RestSuccessResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RestSuccessResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the name, description, and list of devices in a device group.
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    next    Optional parameter: Continue the previous query from the pageUrl pagetoken
     * @return    Returns the GroupListResponse response from the API call 
     */
    public GroupListResponse getDeviceGroupInfoUsingGET(
                final String aname,
                final String gname,
                final String vZM2MToken,
                final Long next
    ) throws Throwable {
        APICallBackCatcher<GroupListResponse> callback = new APICallBackCatcher<GroupListResponse>();
        getDeviceGroupInfoUsingGETAsync(aname, gname, vZM2MToken, next, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the name, description, and list of devices in a device group.
     * @param    aname    Required parameter: Account name
     * @param    gname    Required parameter: Group name
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    next    Optional parameter: Continue the previous query from the pageUrl pagetoken
     * @return    Returns the void response from the API call 
     */
    public void getDeviceGroupInfoUsingGETAsync(
                final String aname,
                final String gname,
                final String vZM2MToken,
                final Long next,
                final APICallBack<GroupListResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/{aname}/name/{gname}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5729419539279410552L;
            {
                    put( "aname", aname );
                    put( "gname", gname );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5450621140523796370L;
            {
                    put( "next", next );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4749348892457277640L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GroupListResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GroupListResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of device groups in an account
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    aname    Required parameter: Account name
     * @return    Returns the List<GroupResponse> response from the API call 
     */
    public List<GroupResponse> getListUsingGET(
                final String vZM2MToken,
                final String aname
    ) throws Throwable {
        APICallBackCatcher<List<GroupResponse>> callback = new APICallBackCatcher<List<GroupResponse>>();
        getListUsingGETAsync(vZM2MToken, aname, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns a list of device groups in an account
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @param    aname    Required parameter: Account name
     * @return    Returns the void response from the API call 
     */
    public void getListUsingGETAsync(
                final String vZM2MToken,
                final String aname,
                final APICallBack<List<GroupResponse>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/{aname}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5507067504641878060L;
            {
                    put( "aname", aname );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5440638761638231924L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<GroupResponse> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<GroupResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Creates a new device group and optionally adds a set of devices to that group.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RestSuccessResponse response from the API call 
     */
    public RestSuccessResponse createDeviceGroupUsingPOST(
                final CreateDevGroupRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RestSuccessResponse> callback = new APICallBackCatcher<RestSuccessResponse>();
        createDeviceGroupUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Creates a new device group and optionally adds a set of devices to that group.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createDeviceGroupUsingPOSTAsync(
                final CreateDevGroupRequest request,
                final String vZM2MToken,
                final APICallBack<RestSuccessResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4866592081232321183L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RestSuccessResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RestSuccessResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}