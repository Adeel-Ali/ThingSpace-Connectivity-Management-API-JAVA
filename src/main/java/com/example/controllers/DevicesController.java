/*
 * ThingSpaceConnectivityManagementAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class DevicesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static DevicesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the DevicesController class 
     */
    public static DevicesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new DevicesController();
            }
        }
        return instance;
    }

    /**
     * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
     * @param    serviceType    Required parameter: Identifier type
     * @param    request    Required parameter: Device Usage Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse changeDeviceIdUsingPUT(
                final String serviceType,
                final ChangeDeviceIdRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        changeDeviceIdUsingPUTAsync(serviceType, request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
     * @param    serviceType    Required parameter: Identifier type
     * @param    request    Required parameter: Device Usage Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void changeDeviceIdUsingPUTAsync(
                final String serviceType,
                final ChangeDeviceIdRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/{serviceType}/actions/deviceId");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5638224525099754903L;
            {
                    put( "serviceType", serviceType );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5337643374403770490L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the total amount of data sent and the total number of SMS messages sent or received by a set of devices in a specified timeframe.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createAggregateUsingPOST(
                final DeviceAggregateUsageListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createAggregateUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the total amount of data sent and the total number of SMS messages sent or received by a set of devices in a specified timeframe.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createAggregateUsingPOSTAsync(
                final DeviceAggregateUsageListRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/usage/actions/list/aggregate");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4999279095712130411L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the network data usage history of a device during a specified time period.
     * @param    request    Required parameter: Device Usage Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the List<DeviceUsageListResponse> response from the API call 
     */
    public List<DeviceUsageListResponse> createUsageListUsingPOST(
                final DeviceUsageListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<List<DeviceUsageListResponse>> callback = new APICallBackCatcher<List<DeviceUsageListResponse>>();
        createUsageListUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the network data usage history of a device during a specified time period.
     * @param    request    Required parameter: Device Usage Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createUsageListUsingPOSTAsync(
                final DeviceUsageListRequest request,
                final String vZM2MToken,
                final APICallBack<List<DeviceUsageListResponse>> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/usage/actions/list");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4909451778227193709L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DeviceUsageListResponse> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<DeviceUsageListResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Requests the current PRL version for devices, which can help determine which devices need a PRL update.
     * @param    request    Required parameter: Device PRL Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createPrlListUsingPOST(
                final DevicePrlListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createPrlListUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Requests the current PRL version for devices, which can help determine which devices need a PRL update.
     * @param    request    Required parameter: Device PRL Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createPrlListUsingPOSTAsync(
                final DevicePrlListRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/prl/actions/list");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5042504903079986641L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the provisioning history of a device during a specified time period.
     * @param    request    Required parameter: Device ProHistory Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the List<DeviceProvisioningHistoryListResponse> response from the API call 
     */
    public List<DeviceProvisioningHistoryListResponse> createProvisioningHistoryListUsingPOST(
                final DeviceProvisioningHistoryListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<List<DeviceProvisioningHistoryListResponse>> callback = new APICallBackCatcher<List<DeviceProvisioningHistoryListResponse>>();
        createProvisioningHistoryListUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the provisioning history of a device during a specified time period.
     * @param    request    Required parameter: Device ProHistory Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createProvisioningHistoryListUsingPOSTAsync(
                final DeviceProvisioningHistoryListRequest request,
                final String vZM2MToken,
                final APICallBack<List<DeviceProvisioningHistoryListResponse>> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/history/actions/list");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5008890224786149776L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<DeviceProvisioningHistoryListResponse> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<DeviceProvisioningHistoryListResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Changes or removes the costCenterCode value for one or more devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse changeCostCenterUsingPUT(
                final DeviceCostCenterRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        changeCostCenterUsingPUTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Changes or removes the costCenterCode value for one or more devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void changeCostCenterUsingPUTAsync(
                final DeviceCostCenterRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/costCenter");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5568051805230963370L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of network connection events for a device during a specified time period.
     * @param    request    Required parameter: Device Connection Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the List<ConnectionHistoryResponse> response from the API call 
     */
    public List<ConnectionHistoryResponse> createConnectionListHistoryUsingPOST(
                final DeviceConnectionListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<List<ConnectionHistoryResponse>> callback = new APICallBackCatcher<List<ConnectionHistoryResponse>>();
        createConnectionListHistoryUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns a list of network connection events for a device during a specified time period.
     * @param    request    Required parameter: Device Connection Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createConnectionListHistoryUsingPOSTAsync(
                final DeviceConnectionListRequest request,
                final String vZM2MToken,
                final APICallBack<List<ConnectionHistoryResponse>> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/connections/actions/listHistory");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4801126130081606097L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<ConnectionHistoryResponse> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<ConnectionHistoryResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of network connection events for a device during a specified time period.
     * @param    request    Required parameter: Device Connection Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the List<ConnectionEvent> response from the API call 
     */
    public List<ConnectionEvent> createConnectionListUsingPOST(
                final DeviceConnectionListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<List<ConnectionEvent>> callback = new APICallBackCatcher<List<ConnectionEvent>>();
        createConnectionListUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns a list of network connection events for a device during a specified time period.
     * @param    request    Required parameter: Device Connection Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createConnectionListUsingPOSTAsync(
                final DeviceConnectionListRequest request,
                final String vZM2MToken,
                final APICallBack<List<ConnectionEvent>> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/connections/actions/list");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5755350237701751570L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<ConnectionEvent> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<ConnectionEvent>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Restore service to one or more suspended devices. 
     * @param    request    Required parameter: Update state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createRestoreUsingPOST(
                final CarrierActionsRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createRestoreUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Restore service to one or more suspended devices. 
     * @param    request    Required parameter: Update state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createRestoreUsingPOSTAsync(
                final CarrierActionsRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/restore");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5442075787979028527L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Suspends service for one or more devices. 
     * @param    request    Required parameter: Update state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createSuspendUsingPOST(
                final CarrierActionsRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createSuspendUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Suspends service for one or more devices. 
     * @param    request    Required parameter: Update state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createSuspendUsingPOSTAsync(
                final CarrierActionsRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/suspend");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5712939001734860344L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Sets a new service plan for one or more devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse updateServicePlanUsingPUT(
                final ServicePlanUpdateRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        updateServicePlanUsingPUTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Sets a new service plan for one or more devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void updateServicePlanUsingPUTAsync(
                final ServicePlanUpdateRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/plan");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4961558495188885479L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns information about a specified device or a list of devices in an account.
     * @param    request    Required parameter: Device Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the DeviceListResponse response from the API call 
     */
    public DeviceListResponse createListUsingPOST(
                final DeviceListRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<DeviceListResponse> callback = new APICallBackCatcher<DeviceListResponse>();
        createListUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns information about a specified device or a list of devices in an account.
     * @param    request    Required parameter: Device Query
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createListUsingPOSTAsync(
                final DeviceListRequest request,
                final String vZM2MToken,
                final APICallBack<DeviceListResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/list");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5661835201195428679L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceListResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceListResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Deactivates service for one or more devices.
     * @param    request    Required parameter: Deactivate state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createDeactiveUsingPOST(
                final CarrierDeactivateRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createDeactiveUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Deactivates service for one or more devices.
     * @param    request    Required parameter: Deactivate state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createDeactiveUsingPOSTAsync(
                final CarrierDeactivateRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/deactivate");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4969350066829288078L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates one or more custom field values for devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse updateCustomFieldsUsingPUT(
                final CustomFieldsUpdateRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        updateCustomFieldsUsingPUTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates one or more custom field values for devices.
     * @param    request    Required parameter: Request
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void updateCustomFieldsUsingPUTAsync(
                final CustomFieldsUpdateRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/customFields");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5417416049865391277L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Adds up to 200 new devices, without provisioning lines of service for them.
     * @param    request    Required parameter: Devices to Add
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the List<AddDevicesResponseMessage> response from the API call 
     */
    public List<AddDevicesResponseMessage> addUsingPOST(
                final AddDevicesRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<List<AddDevicesResponseMessage>> callback = new APICallBackCatcher<List<AddDevicesResponseMessage>>();
        addUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Adds up to 200 new devices, without provisioning lines of service for them.
     * @param    request    Required parameter: Devices to Add
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void addUsingPOSTAsync(
                final AddDevicesRequest request,
                final String vZM2MToken,
                final APICallBack<List<AddDevicesResponseMessage>> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/add");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4742025879937282188L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<AddDevicesResponseMessage> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<AddDevicesResponseMessage>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Activates service for one or more devices.
     * @param    request    Required parameter: Activate state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the RequestResponse response from the API call 
     */
    public RequestResponse createActiveUsingPOST(
                final CarrierActivateRequest request,
                final String vZM2MToken
    ) throws Throwable {
        APICallBackCatcher<RequestResponse> callback = new APICallBackCatcher<RequestResponse>();
        createActiveUsingPOSTAsync(request, vZM2MToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Activates service for one or more devices.
     * @param    request    Required parameter: Activate state
     * @param    vZM2MToken    Required parameter: M2M-MC Session Token
     * @return    Returns the void response from the API call 
     */
    public void createActiveUsingPOSTAsync(
                final CarrierActivateRequest request,
                final String vZM2MToken,
                final APICallBack<RequestResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/actions/activate");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5149538646622885260L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "VZ-M2M-Token", vZM2MToken );
                    put( "api_key", Configuration.apiKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new RestErrorResponseException("Error Response", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RequestResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}